<?php

namespace Troiswa\BackBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    /**
     * 
     * @return 
     */
    public function findAllMaison() {
        $em = $this->getEntityManager();

        $query = $em->createQuery("
            SELECT prod
            FROM TroiswaBackBundle:Product prod");

        return $query->getResult();
    }

    /**
     * Retourne les produits par quandtité
     * @author Eric
     * @param null $quantity
     * @return array
     */
    public function findProductsByQuantity($quantity = null) {

        $query = $this->createQueryBuilder("prod");

        if ($quantity != null) {
            $query->where("prod.quantity >= :quantity")
                ->setParameter("quantity", $quantity);
        }

        return $query->getQuery()->getResult();

    }

    /**
     * Retourne le nombre de produit
     * @author Eric
     * @return integer
     */
    public function countActiveProduct() {
        $query = $this->createQueryBuilder("prod");

        $query->select("COUNT(prod.title)")
            ->where("prod.active = 1");

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * Retourne le nombre de produit dont la quantité est à 0
     * @return mixed
     */
    public function countProductByQuantityIsZero() {

        $query = $this->createQueryBuilder("prod");

        $query->select("COUNT(prod.title)")
            ->where("prod.quantity = 0");

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * Retourne les produits dont la quantité est inférieur à une valeur
     * @param $quantity
     * @return array
     */
    public function findProductsByMinimumQuantity($quantity) {

        $query = $this->createQueryBuilder("prod");

        $query->where("prod.quantity < :quantity")
            ->setParameter("quantity", $quantity);

        return $query->getQuery()->getResult();


    }

    /**
     * Retroune le nombre d'actif et non actif
     * @return array
     */
    public function countStatesActiveProduct() {

        $query = $this->createQueryBuilder("prod")
            ->select("COUNT(prod.active) AS nb, prod.active AS state")
            ->addGroupBy("prod.active");

        return $query->getQuery()->getResult();
    }

    /**
     * Retourne les produits dont le prix est entre 2 valeurs
     * @param $firstprice
     * @param $lastprice
     * @return array
     */
    public function findPricesByBeetweenPrice($firstprice, $lastprice) {

        $query = $this->createQueryBuilder("prod")
            ->select("prod.title, prod.price")
            ->where("prod.price >= :firstprice")
            ->andWhere("prod.price <= :lastprice")
            ->setParameters([
                "firstprice" => $firstprice,
                "lastprice" => $lastprice
            ]);

        return $query->getQuery()->getResult();
    }

}
