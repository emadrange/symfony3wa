<?php

namespace Troiswa\BackBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    /**
     * Exercice du findAll()
     * @author Eric
     * @return array
     */
    public function findAllMaison() {
        $em = $this->getEntityManager();

        /* requete DQL */
        $query = $em->createQuery("
            SELECT prod
            FROM TroiswaBackBundle:Product prod");

        return $query->getResult();
    }

    /**
     * Retourne la liste des produits avec la catégorie associée
     * @author Eric
     * @return array
     */
    public function findAllProductWithCategory() {

        /*$query = $this->getEntityManager()->createQuery(
            "
            SELECT prod, cat
            FROM TroiswaBackBundle:Product prod
            LEFT JOIN prod.cat cat
            ORDER BY prod.title
            "
        );*/

        $query = $this->createQueryBuilder('prod')
            ->select("prod, cat")
            ->leftJoin("prod.cat", "cat")
            ->orderBy("prod.title");

        return $query->getQuery()->getResult();
    }
    
    /**
     * Retourne un produit avec tous ses éléments
     * @author Eric
     *
     * @param array $dataUrl
     * @return mixed
     */
    public function findOneProductWithAllElement($dataUrl) {
        
        $query = $this->createQueryBuilder('prod')
                ->select('prod, brand, cat, photo, tag')
                ->leftJoin('prod.marque', 'brand')
                ->leftJoin('prod.cat', 'cat')
                ->leftJoin('prod.cover', 'photo')
                ->leftJoin('prod.tag', 'tag')
                ->where('prod.id = :id')
                ->setParameter('id', $dataUrl['id']);
        
        return $query->getQuery()->getSingleResult();
        
    }

    /**
     * Retourne les produits avec leur marque et leur catégorie
     * @param boolean $isPaginable Pour la pagination
     * @return array
     */
    public function findAllProductWithBrandAndCategory($isPaginable) {
        
        $query = $this->createQueryBuilder('prod')
                ->select('prod, cat, brand, logo')
                ->leftJoin('prod.cat', 'cat')
                ->leftJoin('prod.marque', 'brand')
                ->leftJoin('brand.logo', 'logo');

        if ($isPaginable) {
            return $query->getQuery();
        }

        $query->orderBy('prod.title');

        return $query->getQuery()->getResult();
    }

    /**
     * Retourne les produits par quandtité
     * @author Eric
     * @param null $quantity
     * @return array
     */
    public function findProductsByQuantity($quantity = null) {

        $query = $this->createQueryBuilder("prod");

        if ($quantity != null) {
            $query->where("prod.quantity >= :quantity")
                ->setParameter("quantity", $quantity);
        }

        return $query->getQuery()->getResult();
    }

    /**
     * Retourne le nombre de produit
     * @author Eric
     * @return integer
     */
    public function countActiveProduct() {
        $query = $this->createQueryBuilder("prod");

        $query->select("COUNT(prod.title)")
            ->where("prod.active = 1");

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * Retourne le nombre de produit dont la quantité est à 0
     * @author Eric
     * @return integer
     */
    public function countProductByQuantityIsZero() {

        $query = $this->createQueryBuilder("prod");

        $query->select("COUNT(prod.title)")
            ->where("prod.quantity = 0");

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * Retourne les produits dont la quantité est inférieur à une valeur
     * @author Eric
     * @param $quantity
     * @return array
     */
    public function findProductsByMinimumQuantity($quantity) {

        $query = $this->createQueryBuilder("prod");

        $query->where("prod.quantity < :quantity")
            ->setParameter("quantity", $quantity);

        return $query->getQuery()->getResult();
    }

    /**
     * Retroune le nombre d'actif et non actif
     * @author Eric
     * @return array
     */
    public function countStatesActiveProduct() {

        $query = $this->createQueryBuilder("prod")
            ->select("COUNT(prod.active) AS nb, prod.active AS state")
            ->addGroupBy("prod.active");

        return $query->getQuery()->getResult();
    }

    /**
     * Retourne les produits dont le prix est entre 2 valeurs
     * @author Eric
     * @param $firstprice
     * @param $lastprice
     * @return array
     */
    public function findPricesByBeetweenPrice($firstprice, $lastprice) {

        $query = $this->createQueryBuilder("prod")
            ->select("prod.title, prod.price")
            ->where("prod.price >= :firstprice")
            ->andWhere("prod.price <= :lastprice")
            ->setParameters([
                "firstprice" => $firstprice,
                "lastprice" => $lastprice
            ]);

        return $query->getQuery()->getResult();
    }

    /**
     * Retourne les catégories dont les produits ont une marque donnée
     * @author Eric
     * @param $brand
     * @return array
     */
    public function getCategoryFromProductByBrand($brand) {

        $query = $this->createQueryBuilder("prod")
            ->select("cat.titre")
            ->where("ma.title = :brand")
            ->leftJoin("prod.cat", "cat")
            ->leftJoin("prod.marque", "ma")
            ->setParameter("brand", $brand);

        return $query->getQuery()->getResult();
    }

    /**
     * Retourne les n produits les plus cher
     * @author Eric
     * @return array
     */
    public function getExpensiveProductsByLimit($nb = 3) {

        $query = $this->createQueryBuilder("prod")
            ->orderBy('prod.price', 'DESC')
            ->setMaxResults($nb);

        return $query->getQuery()->getResult();
    }

    /**
     * Retourne les dernières images les plus récentes
     * @author Eric
     *
     * @param integer $limit
     * @return type
     */
    public function findRecentImagesProductByLimit($limit = 3)
    {
        $query = $this->createQueryBuilder('prod')
                ->leftJoin('prod.cover', 'cover')
                ->where('cover.name IS NOT NULL')
                ->andWhere('prod.quantity > 0')
                ->andWhere('prod.active = :state')
                ->orderBy('prod.created', 'DESC')
                ->setMaxResults($limit)
                ->setParameter('state', true);
        
        return $query->getQuery()->getResult();
    }

    /**
     * Retourne une liste de produits avec le plus de tag
     * @author Eric
     *
     * @param integer $limit
     * @return array
     */
    public function findProductsByGreatestTag($limit = 5)
    {
        $query = $this->createQueryBuilder('prod')
            ->select('COUNT(tag.id) AS HIDDEN nbtag, prod')
            //->select('COUNT(tag.id) AS nbtag, prod.id')
            //->addSelect('prod.title, prod.price, prod.description')
            //->addSelect('cover.name, cover.alt')
            ->leftJoin('prod.tag', 'tag')
            ->leftJoin('prod.cover', 'cover')
            ->groupBy('prod.id')
            ->orderBy('nbtag', 'DESC')
            ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    /**
     * @param string $listId
     * @return array
     */
    public function findProductsByListId($listId)
    {
        $query = $this->createQueryBuilder('prod')
            ->leftJoin('prod.cover', 'cover')
            ->where('prod.id IN (:listid)')
            ->setParameter('listid', $listId);

        return $query->getQuery()->getResult();

    }
}
